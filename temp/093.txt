## Решения задач

Ниже приведены решения некоторых задач, приведенных ранее в книге. Эти решения не обязательно являются самыми верными. Мы настоятельно рекомендуем самостоятельно решать задачи, а обращаться к подсказкам только в исключительных случаях. Например, когда решение задачи занимает более трёх дней.

В "интерфейсе" программ-решений ниже намеренно используется английский язык. Это сделано для того, чтобы на начальных этапах у учащихся не возникало сложностей с кодировкой. Если с кодировкой программных файлов и выводом в консоль на вашем компьютере нет никаких проблем, то используйте русский язык.

## Задание

Посчитайте количество секунд в сутках, не выводя результат на экран с помощью `puts`.

## Решение

Шаг 1. Запустите REPL (например, `irb`).
Шаг 2. Введите `60 * 60 * 24 * 1000`

## Задание

Откройте Linux-терминал и выполните задание с помощью консольных команд. Просмотрите список файлов (`ls -lah`). Создайте директорию с именем `my_directory`. Просмотрите список всех файлов ещё раз, убедитесь в том, что директория существует. Возьмите любой файл из текущей директории и скопируйте в директорию, которую вы только что создали. Просмотрите список файлов в этой директории. Откройте файловый менеджер и выполните те же самое операции.

## Решение

1) `ls - lah`
2) `mkdir my_directory`
3) `ls -lah`
4) `echo blabla > example.txt` (creating a sample file)
5) `cp example.txt my_directory`
6) `ls -lah my_directory`

## Задание

Найдите все файлы в домашнем каталоге с расширением `log`


## Решение

`find ~ -type f -name '*.log'`

## Задание

Создайте пустой текстовый файл `file.txt`. Убедитесь, что файл существует. Запишите своё имя в этот файл. Выведите содержимое файла на экран.

## Решение

1) `touch file.txt`
2) `ls -lah`
3) `echo Walt > file.txt`
4) `cat file.txt`

## Задание

Дана программа для обучения нотам на гитарном грифе. Если вы знакомы с музыкальной теорией, допишите эту программу до конца.

```ruby
puts "What note is on the 0 fret?" # Ответ E
gets
puts "What note is on the 1st fret?" # Ответ F
gets
puts "What note is on the 2nd fret?" # Ответ F#
gets
puts "What note is on the 3rd fret?" # G
gets
# ...
```

## Решение

```ruby
puts "What note is on the 0 fret?" # The right answer is E
gets
puts "What note is on the 1st fret?" # The right answer is F
gets
puts "What note is on the 2nd fret?" # The right answer is F#
gets
puts "What note is on the 3rd fret?" # G
gets
puts "What note is on the 4th fret?" # G#
gets
puts "What note is on the 5th fret?" # A
gets
puts "What note is on the 6th fret?" # A#
gets
puts "What note is on the 7th fret?" # B
gets
puts "What note is on the 8th fret?" # C
gets
puts "What note is on the 9th fret?" # C#
gets
puts "What note is on the 10th fret?" # D
gets
puts "What note is on the 11th fret?" # D#
gets
puts "What note is on the 12th fret?" # E
gets
```

## Задание

Напишите программу для подсчета годовой зарплаты. Пользователь вводит размер заработной платы в месяц, а программа выводит размер заработной платы в год.

## Решение

```ruby
print "Введите месячную зарплату (например, 50000): "
salary = gets.to_i
annual_salary = salary * 12
puts "Ваша зарплата в год равна #{annual_salary} руб."
```

Вывод:

```
Введите месячную зарплату (например, 50000): 50000
Ваша зарплата в год равна 600000 руб.
```

## Задание

Известно, что стоимость дома — 500 тысяч долларов. Человек берет дом в рассрочку на 30 лет. Чтобы выплатить сумму за 30 лет, нужно платить 16 666 долларов в год (это легко посчитать, разделив 500 тысяч на 30). Написать программу, которая для каждого года выводит сумму, которую осталось выплатить.

## Решение

```ruby
price = 500_000

30.times do |n|
  puts "Year #{n}, left to pay: #{price - n * 16_666}"
end
```

Вывод:

```
Year 0, left to pay: 500000
Year 1, left to pay: 483334
Year 2, left to pay: 466668
Year 3, left to pay: 450002
Year 4, left to pay: 433336
Year 5, left to pay: 416670
Year 6, left to pay: 400004
Year 7, left to pay: 383338
Year 8, left to pay: 366672
Year 9, left to pay: 350006
Year 10, left to pay: 333340
Year 11, left to pay: 316674
Year 12, left to pay: 300008
Year 13, left to pay: 283342
Year 14, left to pay: 266676
Year 15, left to pay: 250010
Year 16, left to pay: 233344
Year 17, left to pay: 216678
Year 18, left to pay: 200012
Year 19, left to pay: 183346
Year 20, left to pay: 166680
Year 21, left to pay: 150014
Year 22, left to pay: 133348
Year 23, left to pay: 116682
Year 24, left to pay: 100016
Year 25, left to pay: 83350
Year 26, left to pay: 66684
Year 27, left to pay: 50018
Year 28, left to pay: 33352
Year 29, left to pay: 16686
```

## Задание

Измените программу из предыдущего задания со следующими условиями: человек берет дом не в рассрочку, а в кредит по ставке 4 % годовых на оставшуюся сумму. Для каждого года посчитайте, сколько денег нужно заплатить за этот год за использование кредита.

## Решение

```ruby
price = 500_000
interest = 0.04
annual_payment = 16_666

30.times do |n|
  remaining = price - n * annual_payment
  interest_payment = remaining * interest
  total = annual_payment + interest_payment

  puts "Year #{n}, left to pay: #{remaining}. You are paying #{annual_payment} plus #{interest_payment} of interest (total is #{total})"
end
```

Вывод:

```
Year 0, left to pay: 500000. You are paying 16666 plus 20000.0 of interest (total is 36666.0)
Year 1, left to pay: 483334. You are paying 16666 plus 19333.36 of interest (total is 35999.36)
Year 2, left to pay: 466668. You are paying 16666 plus 18666.72 of interest (total is 35332.72)
Year 3, left to pay: 450002. You are paying 16666 plus 18000.08 of interest (total is 34666.08)
Year 4, left to pay: 433336. You are paying 16666 plus 17333.44 of interest (total is 33999.44)
Year 5, left to pay: 416670. You are paying 16666 plus 16666.8 of interest (total is 33332.8)
Year 6, left to pay: 400004. You are paying 16666 plus 16000.16 of interest (total is 32666.16)
Year 7, left to pay: 383338. You are paying 16666 plus 15333.52 of interest (total is 31999.52)
Year 8, left to pay: 366672. You are paying 16666 plus 14666.880000000001 of interest (total is 31332.88)
Year 9, left to pay: 350006. You are paying 16666 plus 14000.24 of interest (total is 30666.239999999998)
Year 10, left to pay: 333340. You are paying 16666 plus 13333.6 of interest (total is 29999.6)
Year 11, left to pay: 316674. You are paying 16666 plus 12666.960000000001 of interest (total is 29332.96)
Year 12, left to pay: 300008. You are paying 16666 plus 12000.32 of interest (total is 28666.32)
Year 13, left to pay: 283342. You are paying 16666 plus 11333.68 of interest (total is 27999.68)
Year 14, left to pay: 266676. You are paying 16666 plus 10667.04 of interest (total is 27333.04)
Year 15, left to pay: 250010. You are paying 16666 plus 10000.4 of interest (total is 26666.4)
Year 16, left to pay: 233344. You are paying 16666 plus 9333.76 of interest (total is 25999.760000000002)
Year 17, left to pay: 216678. You are paying 16666 plus 8667.12 of interest (total is 25333.120000000003)
Year 18, left to pay: 200012. You are paying 16666 plus 8000.4800000000005 of interest (total is 24666.48)
Year 19, left to pay: 183346. You are paying 16666 plus 7333.84 of interest (total is 23999.84)
Year 20, left to pay: 166680. You are paying 16666 plus 6667.2 of interest (total is 23333.2)
Year 21, left to pay: 150014. You are paying 16666 plus 6000.56 of interest (total is 22666.56)
Year 22, left to pay: 133348. You are paying 16666 plus 5333.92 of interest (total is 21999.92)
Year 23, left to pay: 116682. You are paying 16666 plus 4667.28 of interest (total is 21333.28)
Year 24, left to pay: 100016. You are paying 16666 plus 4000.64 of interest (total is 20666.64)
Year 25, left to pay: 83350. You are paying 16666 plus 3334.0 of interest (total is 20000.0)
Year 26, left to pay: 66684. You are paying 16666 plus 2667.36 of interest (total is 19333.36)
Year 27, left to pay: 50018. You are paying 16666 plus 2000.72 of interest (total is 18666.72)
Year 28, left to pay: 33352. You are paying 16666 plus 1334.08 of interest (total is 18000.08)
Year 29, left to pay: 16686. You are paying 16666 plus 667.44 of interest (total is 17333.44)
```

## Задание

Попробуйте написать следующие сравнения в REPL и догадаться, каков будет результат для языка Руби. Заполните таблицы.

**Таблица 1:**

|Выражение: | `0 == 0 && 2 + 2 == 4` |
|Результат: |                        |


**Таблица 2:**

|Выражение: | `1 == 2 && 2 == 1` |
|Результат: |                    |

**Таблица 3:**

|Выражение: | `1 == 2 || 2 == 1` |
|Результат: |                    |

## Решение

1) true
2) false
3) false

## Задание

Напишите программу, которая спрашивает логин и пароль пользователя в консоли. Если имя «admin» и пароль «12345», программа должна выводить на экран «Доступ к банковской ячейке разрешен».

## Решение

```ruby
puts "Login:"
login = gets.chomp
puts "Password:"
password = gets.chomp

if login == "admin" && password == "12345"
  puts "Granted access to online banking"
else
  puts "Access denied"
end
```

## Задание

Известно, что на Луне продают участки. Любой участок менее 50 квадратных метров стоит 1000 долларов. Участок площадью от 50 до 100 квадратных метров стоит 1500 долларов. От 100 и выше — по 25 долларов за квадратный метр. Напишите программу, которая запрашивает длину и ширину участка и выводит на экран его стоимость.

## Решение

```ruby
puts "Width (for example, type 5 for 5 meters):"
width = gets.to_i
puts "Length (for example, type 20 for 20 meters):"
length = gets.to_i

area = width * length
puts "Area is #{area} square meters"

price = 0
if area < 50
  price = 1000
elsif area >= 50 && area < 100
  price = 1500
else
  price = area * 25
end

puts "Price for the land is $#{price}"
```

Вывод:

```
$ ruby app.rb
Width (for example, type 5 for 5 meters):
1000
Length (for example, type 20 for 20 meters):
1100
Area is 1100000 square meters
Price for the land is $27500000
```

## Задание

Напишите программу, чтобы она загадывала число от 1 до 1_000_000 (1 миллиона). Чтобы можно было угадать это число, программа должна сравнивать текущий ответ пользователя и искомое число: 1) если ответ пользователя больше, то программа должна выводить на экран «Искомое число меньше вашего ответа»; 2) иначе «Искомое число больше вашего ответа». Может показаться, что угадать это число невозможно, однако математический расчет показывает, что угадать число в этом случае можно не более, чем за 20 попыток.

## Решение

```ruby
number = rand(1..1_000_000)
print 'Hi! I picked the number from 1 to 1 million, try to guess it: '

loop do
  input = gets.to_i

  if input == number
    puts 'You guessed it!'
    exit
  else
    if number > input
      print 'Nope, the number is greater than that, try again: '
    else
      print 'Nope, the number is less than that, try again: '
    end
  end
end
```

Вывод:

```
$ ruby app.rb
ruby app.rb
Hi! I picked the number from 1 to 1 million, try to guess it: 500000
Nope, the number is less than that, try again: 250000
Nope, the number is greater than that, try again: 350000
Nope, the number is greater than that, try again: 400000
Nope, the number is greater than that, try again: 450000
Nope, the number is greater than that, try again: 475000
Nope, the number is greater than that, try again: 490000
Nope, the number is greater than that, try again: 495000
Nope, the number is greater than that, try again: 499999
Nope, the number is less than that, try again: 498000
Nope, the number is less than that, try again: 497000
Nope, the number is greater than that, try again: 497500
Nope, the number is greater than that, try again: 497750
Nope, the number is greater than that, try again: 498000
Nope, the number is less than that, try again: 497900
Nope, the number is less than that, try again: 497800
Nope, the number is greater than that, try again: 497850
Nope, the number is greater than that, try again: 497875
Nope, the number is greater than that, try again: 497890
Nope, the number is greater than that, try again: 497899
Nope, the number is less than that, try again: 497895
Nope, the number is less than that, try again: 497893
Nope, the number is less than that, try again: 497891
You guessed it!
```

## Задание

С помощью символов `/`, `-`, `\`, `|` сделайте анимацию — индикатор загрузки. Если выводить эти символы по очереди на одном и том же месте, возникает ощущение вращающегося символа.

## Решение

```ruby
loop do
  print "/\r"
  sleep 0.1

  print "-\r"
  sleep 0.1

  print "\\\r"
  sleep 0.1

  print "|\r"
  sleep 0.1
end
```

## Задание

См. раздел "Однорукий бандит".

Улучшить готовую программу следующим образом. Определите метод, который будет вычислять случайный номер с анимацией (используйте *sleep* со случайной задержкой). Примените [анимацию](https://goo.gl/hpk49x) к переменным `x`, `y`, `z`.

## Решение

```ruby
def animated_rand
  value = rand(0..5)

  0.upto(value) do |num|
    print "#{num}\r"
    sleep 0.3
  end
  puts

  value
end

print "What's your age: "
age = gets.to_i
if age < 18
  puts 'Sorry, but you should be at least 18 to play'
  exit
end

balance = 20
loop do
  puts 'Press Enter to pull the handle...'
  gets

  x = animated_rand
  y = animated_rand
  z = animated_rand

  puts "Result: #{x} #{y} #{z}"

  if x == 0 && y == 0 && z == 0
    balance = 0
    puts 'You lost your money'
  elsif x == 1 && y == 1 && z == 1
    balance += 10
    puts 'You won $10'
  elsif x == 2 && y == 2 && z == 2
    balance += 20
    puts 'You won $20'
  else
    balance -= 0.5
    puts 'You lost 50 cents'
  end

  puts "Your balance is #{balance} dollars"
end
```

## Задание

Создайте массив в 5 строк и 4 столбца, заполните каждую строку случайным значением от 1 до 5 (только одно случайное значение для каждой строки). Пример для массива 2*3:

{line-numbers: false}
```ruby
[
  [2, 2, 2],
  [5, 5, 5]
]
```

## Решение

```ruby
Array.new(5) { Array.new(4, rand(1..5))}
```

или

```ruby
Array.new(5) do
  Array.new(4, rand(1..5)) 
end
```

или

```ruby
Array.new(5) do
  random = rand(1..5)
  Array.new(4) do 
    random
  end
end
```

## Задание

Создайте массив в 4 строки и 5 столбцов, заполните каждую строку случайным значением от 1 до 5 (только одно случайное значение для каждой строки).

## Решение

```ruby
Array.new(4) { Array.new(5) { rand(1..5) } }
```

## Задание

Создайте массив 5*4 и заполните весь массив абсолютно случайными значениями от 0 до 9.

## Решение

```ruby
Array.new(5) { Array.new(4) { rand(0..9) } }
```

## Задание

{line-numbers: false}
```ruby
arr = [
  ['a', 'b', 'c'],
  ['d', 'e', 'f'],
  ['g', 'h', 'i']  
]
```

Обойдите массив выше «вручную», без помощи циклов, крест-накрест, таким образом, чтобы вывести на экран строку `aeiceg` (подпрограмма займет 6 строк — по 1 строке для каждого элемента).

## Решение

```ruby
arr = [
  ['a', 'b', 'c'],
  ['d', 'e', 'f'],
  ['g', 'h', 'i']
]

print arr[0][0]
print arr[1][1]
print arr[2][2]

print arr[0][2]
print arr[1][1]
print arr[2][0]
```

## Задание

Cоздайте 2D-массив размером 3*3. Каждый элемент будет иметь одинаковое значение (например, «something»). Сделайте так, чтобы каждый элемент массива был защищен от `upcase!`. Например, если мы вызовем `arr[2][2].upcase!`, этот вызов не изменит содержимое других ячеек массива. Проверьте свое задание в `pry`.

## Решение

```ruby
arr = Array.new(3) { Array.new(3) { 'something' } }
puts arr.inspect

arr[1][1].upcase!
puts arr.inspect
```

## Задание

К вам обратился предприниматель Джон Смит. Джон говорит, что его бизнес специализируется на создании телефонных номеров для рекламы. Они хотят подписать с вами контракт, но прежде хотелось бы убедиться, что вы хороший программист, можете работать с их требованиями и доставлять качественное программное обеспечение. Они говорят: у нас есть номера телефонов с буквами. Например, для бизнеса по продаже матрасов существует номер «555-MATRESS», который транслируется в «555-628-7377». Когда наши клиенты набирают буквенный номер на клавиатуре телефона (см. картинку ниже), он транслируется в цифровой. Напишите программу, которая будет переводить (транслировать) слово без дефисов в телефонный номер. Сигнатура метода будет следующей:

{line-numbers: false}
```ruby
def phone_to_number(phone)
  # ваш код тут...
end

puts phone_to_number('555MATRESS') # должно напечатать 5556287377
```

## Решение

```ruby
# ВАЖНО: это решение не самое лучшие, и основано только на массивах
# Структура данных "хеш" лучше подходит в этом случае, см. следующие раздела.

def find_number_by_letter(letter)
  arr = [
    [],               # 0
    [],               # 1
    %w(A B C),        # 2
    %w(D E F),        # 3
    %w(G H I),        # 4
    %w(J K L),        # 5
    %w(M N O),        # 6
    %w(P Q R S),      # 7
    %w(T U V),        # 8
    %w(W X Y Z)       # 9
  ]

  arr.each_with_index do |subarray, i|
    subarray.each do |letter_candidate|
      return i if letter == letter_candidate
    end
  end

  # Nothing found, just return the letter
  letter
end

def phone_to_number(phone)
  phone.each_char do |letter|
    print find_number_by_letter(letter)
  end
end

phone_to_number('555MATRESS') # напечатает 5556287377
```

## Задание

С помощью указателя на функцию посчитайте количество четных элементов в массиве [11, 22, 33, 44, 55].

## Решение

```ruby
[11, 22, 33, 44, 55].count(&:even?)
```

## Задание

Используя инициализированный хеш из примера ниже, напишите код, который адаптирует этот хеш для условий на Луне. Известно, что вес на Луне в 6 раз меньше, чем вес на Земле.

{line-numbers: false}
```ruby
obj = {
  soccer_ball: 410,
  tennis_ball: 58,
  golf_ball: 45
}
```

## Решение

```ruby
obj = {
  soccer_ball: 410,
  tennis_ball: 58,
  golf_ball: 45
}

puts 'Golf ball weight on the Moon (grams):'
puts obj[:golf_ball] / 6

puts 'Soccer ball weight on the Moon (grams):'
puts obj[:soccer_ball] / 6

puts 'Tennis ball weight on the Moon (grams):'
puts obj[:tennis_ball] / 6
```

## Задание

«Лунный магазин». Используя хеш с новым весом из предыдущего задания, напишите программу, которая для каждого типа спрашивает пользователя, какое количество мячей пользователь хотел бы купить в магазине (ввод числа из консоли). В конце программа выдает общий вес всех товаров в корзине. Для сравнения программа должна также выдавать общий вес всех товаров, если бы они находились на Земле.

## Решение

```ruby
obj = {
  soccer_ball: 410,
  tennis_ball: 58,
  golf_ball: 45
}

puts "***************"
puts "The Moon Store"
puts "***************"
puts

print 'How many golf balls are you willing to buy? '
golf_ball_cnt = gets.to_i

print 'How many soccer balls are you willing to buy? '
soccer_ball_cnt = gets.to_i

print 'How many tennis balls are you willing to buy? '
tennis_ball_cnt = gets.to_i

weight_on_earth = \
  golf_ball_cnt   * obj[:golf_ball]   +
  soccer_ball_cnt * obj[:soccer_ball] +
  tennis_ball_cnt * obj[:tennis_ball]

puts "Total weight of all items on the Earth is #{(weight_on_earth.to_f / 1000)} kg or #{(weight_on_earth * 0.00220462)} lb"
puts "Total weight of all items on the Moon is #{(weight_on_earth.to_f / 1000 / 6)} kg or #{(weight_on_earth * 0.00220462 / 6)} lb"
```

Вывод:

```
$ ruby
ruby app.rb
***************
The Moon Store
***************

How many golf balls are you willing to buy? 1
How many soccer balls are you willing to buy? 2
How many tennis balls are you willing to buy? 3
Total weight of all items on the Earth is 1.039 kg or 2.29060018 lb
Total weight of all items on the Moon is 0.17316666666666666 kg or 0.3817666966666667 lb
```

## Задание

Напишите хеш, который бы отображал состояние следующего приложения:

{width: 80%}
![Пользовательский интерфейс онлайн-банкинга](images/064-04.png)

## Решение

```ruby
{
  client: "Герман Оскарович Блокчейн",
  balance_usd: 123.45,
  show_deposits: true,
  transactions: [
    { description: "Сапоги",                    type: :withdrawal, amount: 40 },
    { description: "Зарплата (компания БЛИЖП)", type: :deposit,    amount: 1000 },
    { description: "Продажа ваучера",           type: :deposit,    amount: 300 },
    { description: "Велосипед",                 type: :withdrawal, amount: 200 },
    { description: "Протез для ноги бабушке",   type: :withdrawal, amount: 100 },
  ]
}
```

## Задание

Напишите программу, которая будет принимать хеш, который вы определили в предыдущей задаче, и выводить результат на экран. Убедитесь, что переключатель работает и программа не выводит приход, если переключатель включен.

## Решение

```ruby
def show(info)
  puts "Name: #{info[:client]}"
  puts "Balance: $#{info[:balance_usd]}"
  puts "Show deposits: #{info[:show_deposits]}"
  puts

  puts "Transactions:"

  info[:transactions].each do |t|
    next if !info[:show_deposits] && t[:type] == :deposit

    puts "#{t[:description]}, #{t[:type]}, $#{t[:amount]}"
  end
end

show({
  client: "Герман Оскарович Блокчейн",
  balance_usd: 123.45,
  show_deposits: true,
  transactions: [
    { description: "Сапоги",                    type: :withdrawal, amount: 40 },
    { description: "Зарплата (компания БЛИЖП)", type: :deposit,    amount: 1000 },
    { description: "Продажа ваучера",           type: :deposit,    amount: 300 },
    { description: "Велосипед",                 type: :withdrawal, amount: 200 },
    { description: "Протез для ноги бабушке",   type: :withdrawal, amount: 100 },
  ]
})
```

Вывод 1:

```
Name: Герман Оскарович Блокчейн
Balance: $123.45
Show deposits: true

Transactions:
Сапоги, withdrawal, $40
Зарплата (компания БЛИЖП), deposit, $1000
Продажа ваучера, deposit, $300
Велосипед, withdrawal, $200
Протез для ноги бабушке, withdrawal, $100
```

Вывод 2:

```
Name: Герман Оскарович Блокчейн
Balance: $123.45
Show deposits: false

Transactions:
Сапоги, withdrawal, $40
Велосипед, withdrawal, $200
Протез для ноги бабушке, withdrawal, $100
```

## Задание

Напишите программу, которая считает частотность букв и выводит на экран список букв и их количество в предложении.

## Решение

Один из способов реализации это использовать хеш со значением по-умолчанию (`0`):

```ruby
def f(sentence)
  hash = Hash.new(0)

  sentence.each_char do |ch|
    hash[ch] += 1
  end

  hash
end

puts f('quick brown fox jumps over the lazy dog').inspect
```

Другой вариант это использовать относительно метод `Array#tally` (доступен в Руби 2.7.0 и выше):

```ruby
def f(sentence)
  sentence.split('').tally
end

puts f('quick brown fox jumps over the lazy dog').inspect
```

Вывод:

```ruby
{"q"=>1, "u"=>2, "i"=>1, "c"=>1, "k"=>1, " "=>7, "b"=>1, "r"=>2, "o"=>4, "w"=>1, "n"=>1, "f"=>1, "x"=>1, "j"=>1, "m"=>1, "p"=>1, "s"=>1, "v"=>1, "e"=>2, "t"=>1, "h"=>1, "l"=>1, "a"=>1, "z"=>1, "y"=>1, "d"=>1, "g"=>1}
```

Обратите внимание, что в этом предложении четыре буквы "o" и семь пробелов.

## Задание

Дана программа:

{caption: "Узнать, все ли буквы английского алфавита используются в данном предложении"}
```ruby
# импортируем пространство имен, т.к. set
# не определен в пространстве имен по умолчанию
require 'set'

# наш метод, который принимает строку
def f(str)
  # инициализируем set
  set = Set.new

  # итерация по каждому символу в строке
  str.each_char do |c|
    # только если символ между a и z (игнорируем пробелы и все остальное)
    if c >= 'a' && c <= 'z'
      # добавляем в set
      set.add(c)
    end
  end

  # результат выражения true, если есть все английские буквы в наборе
  set.size == 26
end

# выведет true, т.к. в этом предложении используются все буквы англ. алфавита
puts f('quick brown fox jumps over the lazy dog')
```

В программе выше допущена ошибка, которая приведет к большим расходам вычислительных ресурсов на больших строках (например, гигабайты текста и более). Сможете ли вы ее увидеть?

## Решение

См. программу ниже. Решение помечено подсказкой "ОПТИМИЗАЦИЯ".

```ruby
# импортируем пространство имен, т.к. set
# не определен в пространстве имен по умолчанию
require 'set'

# наш метод, который принимает строку
def f(str)
  # инициализируем set
  set = Set.new

  # итерация по каждому символу в строке
  str.each_char do |c|
    # только если символ между a и z (игнорируем пробелы и все остальное)
    if c >= 'a' && c <= 'z'
      # добавляем в set
      set.add(c)
    end
	
    # ОПТИМИЗАЦИЯ: выход из функции сразу,
    # нет необходимости сканировать всю строку,
	# мы уже набрали 26 символов
    return true if set.size == 26	
  end

  # ОПТИМИЗАЦИЯ: зная, что мы выходим в случае набора
  # 26 символов, мы можем сказать, что в этом месте
  # мы их точно не набрали
  false
end

# выведет true, т.к. в этом предложении используются все буквы англ. алфавита
puts f('quick brown fox jumps over the lazy dog')
```

## Задание

Объясните, чем отличается JSON вида

{line-numbers: false}
```ruby
{
  "books": [
    {
      "id": 1,
      "name": "Tom Sawyer and Huckleberry Finn",
    },
    {
      "id": 2,
      "name": "Vingt mille lieues sous les mers",
    }
  ]
}
```

от

{line-numbers: false}
```ruby
{
    "books": {
        "1": {
            "name": "Tom Sawyer and Huckleberry Finn"
        },
        "2": {
            "name": "Vingt mille lieues sous les mers"
        }
    }
}
```

В какой из структур данных выше поиск книги константный O(1), а в какой линейный O(N)? Каким образом предпочтительнее объявить структуру? Какое количество хешей и массивов используется в каждом из примеров? Как добавить книгу в каждом из случаев?

## Решение

Первый блок кода всегда определяет книги как массив независимых объектов, например:

```ruby
books = [
  { ... },
  { ... },
  { ... }
] 
```

Т.к. книги представлены как массив, соблюдение порядка для этой структуры данных всегда гарантировано. Другими словами, если мы добавили объекты в определенном порядке, то в таком порядке они и остаются. Представьте, что у нас есть миллион книг определенный следующим образом:

```ruby
books = [
  { isbn: '9783161484100', ... }, # 1st book
  { isbn: '8372684193990', ... }, # 2nd book
  ...
  { isbn: '0388819938812', ... }  # 1.000.000th book
] 
```

Эти данные (информация о книгах) объявлены последовательно. И чтобы найти какую-то книгу в этом массиве, нам нужно перебрать каждую запись (даже если это делается одним встроенным методом языка типа "find"). В этом случае говорят, что поиск занимает "линейное время" (linear time, или O(N)).

Однако, когда книги представлены в виде структуры данных "хеш" (второй блок кода), идентификаторы являются ключами в структуре данных "хеш". Устройство этой структуры данных не гарантирует порядок (несмотря на то, что в языке Руби порядок гарантируется, не стоит на него полагаться). Зная как работает структура данных "хеш", мы можем сказать, что поиск по ключу занимает "константное время" (constant time, или O(1)), т.е. выполняется моментально.

Мы настоятельно рекомендуем усвоить эту разницу и четко понимать различие между массивом и хешем, между O(N) и O(1). Алгоритмы и структуры данных не являются целью этой книги, но начинающим программистам это будет полезно. Впрочем, объём этой информации довольно большой, и мы рекомендуем всерьез заниматься улучшением знаний в этой области только после устройства на первую работу программистом на языке Руби.

## Задание

См. раздел "Состояние, пример программы".

Пусть метод `initialize` принимает опцию — номер робота. Сделайте так, чтобы номер робота был еще одним параметром, который будет определять его состояние (так же, как и координаты). Измените методы `up` и `down` — если номер робота четный, эти методы не должны производить операции над координатами. Измените методы `left` и `right` — если номер робота нечетный, эти методы также не должны производить никаких операций над координатами. Попробуйте догадаться, что будет на экране при запуске программы.

## Решение

```ruby
class Robot
  # Accessors, so we can access coordinates from the outside
  attr_accessor :x, :y

  # Constructor, accepts hash. If not specified, empty hash will be used.
  # In hash we expect two parameters: initial coordinates of the robot.
  # If not specified, will equal to zero by default.
  def initialize(options={})
    @x = options[:x] || 0
    @y = options[:y] || 0
    @num = options[:num] || 0
  end

  def right
    return if @num.even?

    self.x += 1
  end

  def left
    return if @num.even?

    self.x -= 1
  end

  def up
    return if @num.odd?

    self.y += 1
  end

  def down
    return if @num.odd?

    self.y -= 1
  end
end

# Commander is something that moves a robot.
class Commander
  # Issue a command to move a robot. Accepts robot object
  # and sends it a random command.
  def move(who)
    m = [:right, :left, :up, :down].sample
    who.send(m)
  end
end

# Create commander object, we'll have only one commander
# in this example.
commander = Commander.new

# Array of ten robots, each robot has its own number from 0 to 9.
arr = []
10.times do |num|
  arr << Robot.new(num: num)
end

# Infinite loop (hit ^C to stop the loop)
loop do
  # Tricky way to clear the screen
  puts "\e[H\e[2J"

  # Draw the grid. It starts with -30 to 30 by X,
  # and from 12 to -12 by Y
  (12).downto(-12) do |y|
    (-30).upto(30) do |x|
	  # Check if we have a robot with X and Y coordinates
      found = arr.any? { |robot| robot.x == x && robot.y == y }

      # Draw star if a robot was found. Dot otherwise.
      if found
        print '*'
      else
        print '.'
      end
    end

	# Move to the next line on the screen.
    puts
  end

  # Move each robot randomly.
  arr.each do |robot|
    commander.move(robot)
  end

  # Wait for half a second.
  sleep 0.5
end
```

## Задание

См. раздел "Полиморфизм и duck typing".

Добавьте на поле еще 3 собаки.

## Решение

```ruby
class Robot
  # Accessors, so we can access coordinates from outside
  attr_accessor :x, :y

  # Constructor, accepts hash. If hash not specified, empty is used.
  # We expect two parameters in hash: initial robot coordinates;
  # if not specified, both will equal to zero.
  def initialize(options={})
    @x = options[:x] || 0
    @y = options[:y] || 0
  end

  def right
    self.x += 1
  end

  def left
    self.x -= 1
  end

  def up
    self.y += 1
  end

  def down
    self.y -= 1
  end

  # New method, just a symbol we use for robots.
  def label
    '*'
  end
end

# Dog class has the similar interface, some methods are empty below.
class Dog
  # Accessors, so we can access coordinates from outside
  attr_accessor :x, :y

  # Constructor, accepts hash. If hash not specified, empty is used.
  # We expect two parameters in hash: initial dog coordinates;
  # if not specified, both will equal to zero.
  def initialize(options={})
    @x = options[:x] || 0
    @y = options[:y] || 0
  end

  def right
    self.x += 1
  end

  # Empty method, but it exists. When called does nothing. We need it
  # to avoid "missing method" error.
  def left
  end

  # Another empty method.
  def up
  end

  def down
    self.y -= 1
  end

  # New method, just a symbol we use for robots.
  def label
    '@'
  end
end

# Comander class sends commands and moves robots and dogs.
# Note that THIS CLASS IS EXACTLY THE SAME AS IN PREVIOUS EXAMPLE.
class Commander
  # Send command to move an object. Method accept object and sends
  # it a random command.
  def move(who)
    m = [:right, :left, :up, :down].sample

    # Polymorphism is happening here! We're sending command,
    # but we're unaware of receiver!
    who.send(m)
  end
end

# Create commander object. There is going to be only one commander.
commander = Commander.new

# Array of 10 robots and...
arr = Array.new(10) { Robot.new }

# ...one dog. Since dog implements the same interface, all objects
# in array will be kinda same.
arr.push(Dog.new(x: -12, y: 12))
arr.push(Dog.new(x: -12, y: 12)) # ADDING ONE MORE DOG
arr.push(Dog.new(x: -12, y: 12)) # AND ONE MORE
arr.push(Dog.new(x: -12, y: 12)) # AND ONE MORE

# Infinite loop goes here (press ^C to stop)
loop do
  # Tricky way to clear the screen
  puts "\e[H\e[2J"

  # Draw the grid. It goes from -12 to 12 by X, and 12 to -12 by Y.
  (12).downto(-12) do |y|
    (-12).upto(12) do |x|
      # Check if we have somebody with "x" and "y" coordinates.
      somebody = arr.find { |somebody| somebody.x == x && somebody.y == y }

      # Print label if somebody present. Print dot otherwise.
      if somebody
        # POLYMORPHISM GOES HERE.
        # We print "*" or "@", but we don't know what it is exactly,
        # and we don't have to know.
        print somebody.label
      else
        print '.'
      end
    end

    # Go to the next line.
    puts
  end

  # Hit check. If both objects have the same coordinates and their
  # labels aren't equal, then we assume that a robot caught the dog.
  game_over = arr.combination(2).any? do |a, b|
    a.x == b.x && \
    a.y == b.y && \
    a.label != b.label
  end

  if game_over
    puts 'Game over'
    exit
  end

  # Move each object in random order.
  arr.each do |somebody|
    # Call move method. Code is the same as in previous example.
    # Commander doesn't know about the object type.
    commander.move(somebody)
  end

  # Sleep for half a second.
  sleep 0.5
end
```

## Задание

См. раздел "Полиморфизм и duck typing".

Исправьте программу: если все собаки дошли до правого или нижнего края поля, выводить на экран «Win!».

## Решение

В программе ниже на поле добавлены четыре собаки и два робота. Скорость намеренно увеличена для простоты отладки (см.последнюю строку), но в этом нет необходимости.

```ruby
class Robot
  # Accessors, so we can access coordinates from outside
  attr_accessor :x, :y

  # Constructor, accepts hash. If hash not specified, empty is used.
  # We expect two parameters in hash: initial robot coordinates;
  # if not specified, both will equal to zero.
  def initialize(options={})
    @x = options[:x] || 0
    @y = options[:y] || 0
  end

  def right
    self.x += 1
  end

  def left
    self.x -= 1
  end

  def up
    self.y += 1
  end

  def down
    self.y -= 1
  end

  # New method, just a symbol we use for robots.
  def label
    '*'
  end
end

# Dog class has the similar interface, some methods are empty below.
class Dog
  # Accessors, so we can access coordinates from outside
  attr_accessor :x, :y

  # Constructor, accepts hash. If hash not specified, empty is used.
  # We expect two parameters in hash: initial dog coordinates;
  # if not specified, both will equal to zero.
  def initialize(options={})
    @x = options[:x] || 0
    @y = options[:y] || 0
  end

  def right
    self.x += 1
  end

  # Empty method, but it exists. When called does nothing. We need it
  # to avoid "missing method" error.
  def left
  end

  # Another empty method.
  def up
  end

  def down
    self.y -= 1
  end

  # New method, just a symbol we use for robots.
  def label
    '@'
  end
end

# Comander class sends commands and moves robots and dogs.
# Note that THIS CLASS IS EXACTLY THE SAME AS IN PREVIOUS EXAMPLE.
class Commander
  # Send command to move an object. Method accept object and sends
  # it a random command.
  def move(who)
    m = [:right, :left, :up, :down].sample

    # Polymorphism is happening here! We're sending command,
    # but we're unaware of receiver!
    who.send(m)
  end
end

# Create commander object. There is going to be only one commander.
commander = Commander.new

# Array of 10 robots and...
arr = Array.new(2) { Robot.new }

# ...one dog. Since dog implements the same interface, all objects
# in array will be kinda same.
arr.push(Dog.new(x: -12, y: 12))
arr.push(Dog.new(x: -12, y: 12)) # ADDING ONE MORE DOG
arr.push(Dog.new(x: -12, y: 12)) # AND ONE MORE
arr.push(Dog.new(x: -12, y: 12)) # AND ONE MORE

# Infinite loop goes here (press ^C to stop)
loop do
  # Tricky way to clear the screen
  puts "\e[H\e[2J"

  # Draw the grid. It goes from -12 to 12 by X, and 12 to -12 by Y.
  (12).downto(-12) do |y|
    (-12).upto(12) do |x|
      # Check if we have somebody with "x" and "y" coordinates.
      somebody = arr.find { |somebody| somebody.x == x && somebody.y == y }

      # Print label if somebody present. Print dot otherwise.
      if somebody
        # POLYMORPHISM GOES HERE.
        # We print "*" or "@", but we don't know what it is exactly,
        # and we don't have to know.
        print somebody.label
      else
        print '.'
      end
    end

    # Go to the next line.
    puts
  end

  # Hit check. If both objects have the same coordinates and their
  # labels aren't equal, then we assume that a robot caught the dog.
  game_over = arr.combination(2).any? do |a, b|
    a.x == b.x && \
    a.y == b.y && \
    a.label != b.label
  end

  # Check if all dogs reach the bottom right corner
  dogs_win = arr \
    .select { |player| player.label == '@' } \
    .all? { |dog| dog.x >= 12 || dog.y <= -12  }

  if game_over
    puts 'Game over'
    exit
  end

  if dogs_win
    puts 'Dogs win!'
    exit
  end

  # Move each object in random order.
  arr.each do |somebody|
    # Call move method. Code is the same as in previous example.
    # Commander doesn't know about the object type.
    commander.move(somebody)
  end

  # Sleep for a fraction of a second.
  sleep 0.01
end
```

## Задание

См.раздел "RSpec".

Код файла `shipment.rb` был изменен: если в метод «total_weight» не переданы аргументы, генерируется ошибка (также говорят «выбрасывается исключение»):

{line-numbers: false}
```ruby
module Shipment
  module_function

  def total_weight(options={})
	raise "Can't calculate weight with empty options" if options.empty?
	a = options[:soccer_ball_count] || 0
	b = options[:tennis_ball_count] || 0
	c = options[:golf_ball_count] || 0
	(a * 410) + (b * 58) + (c * 45) + 29
  end
end
```

Измените тест таким образом, чтобы тест проверял, что ошибка на самом деле генерируется.

## Решение

Файл `./spec/shipment_spec.rb` может выглядеть следующим образом:

```ruby
require './lib/shipment'

describe Shipment do
  it 'should calculate shipment with only one item' do
    expect(Shipment.total_weight(soccer_ball_count: 1)).to eq(439)
    expect(Shipment.total_weight(tennis_ball_count: 1)).to eq(87)
    expect(Shipment.total_weight(golf_ball_count: 1)).to eq(74)
  end

  it 'should calculate shipment with multiple items' do
    expect(
      Shipment.total_weight(soccer_ball_count: 3, tennis_ball_count: 2, golf_ball_count: 1)
    ).to eq(1420)
  end

  it 'should raise error when no options provided' do
    expect { Shipment.total_weight }.to raise_error("Can't calculate weight with empty options")
  end
end
```

Вывод:

```
$ rspec -f d

Shipment
  should calculate shipment with only one item
  should calculate shipment with multiple items
  should raise error when no options provided

Finished in 0.00478 seconds (files took 0.13979 seconds to load)
3 examples, 0 failures
```
