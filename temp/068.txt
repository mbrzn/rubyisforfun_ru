## Установка значения по умолчанию

Иногда полезно устанавливать значения в хеше по умолчанию. Следует сделать заметку в книге, т.к. эта возможность нередко забывается, но на практике потребность в значении по умолчанию часто возникает на интервью. Одна из подобных задач — есть какое-то предложение, необходимо сосчитать частотность слов и вывести список. Например, слово «the» встречается 2 раза, слово «dog» — 1 раз и т.д.

Как мы будем решать эту задачу? Представим, что у нас есть строка «the quick brown fox jumps over the lazy dog». Разобьем ее на части:

{line-numbers: false}
```ruby
str = 'the quick brown fox jumps over the lazy dog'
arr = str.split(' ')
```

У нас получился массив слов, давайте обойдем этот массив и занесем каждое значение в хеш, где ключом будет слово, а значением — количество повторов этого слова. Попробуем для начала количество повторов установить в единицу. Как это сделать? Очень просто:

{line-numbers: false}
```ruby
hh = {}
arr.each do |word|
  hh[word] = 1
end
```

Далее нам каким-то образом нужно проверить, встречается ли слово в хеше. Если встречается, то увеличить счетчик на 1. Если не встречается, то добавить новое слово.

{line-numbers: false}
```ruby
arr.each do |word|
  if hh[word].nil?
    hh[word] = 1
  else
    hh[word] += 1
  end
end
```

Код программы целиком выглядел бы следующим образом:

{caption: "Подсчитать количество слов в предложении"}
```ruby
str = 'the quick brown fox jumps over the lazy dog'
arr = str.split(' ')
hh = {}

arr.each do |word|
  if hh[word].nil?
    hh[word] = 1
  else
    hh[word] += 1
  end
end

puts hh.inspect
```

Программа работает, и результат работы выглядит следующим образом:

{line-numbers: false}
```ruby
{"the"=>2, "quick"=>1, "brown"=>1, "fox"=>1, "jumps"=>1, "over"=>1, "lazy"=>1, "dog"=>1}
```

В самом деле, у нас два слова «the», а остальных по одному. Но эту программу можно было бы значительно облегчить, если знать, что в хеше можно установить значение по умолчанию:

{caption: "Подсчитать количество слов в предложении", line-numbers: false}
```ruby
str = 'the quick brown fox jumps over the lazy dog'
arr = str.split(' ')
hh = Hash.new(0)

arr.each do |word|
  hh[word] += 1
end

puts hh.inspect
```

Девять строк кода вместо тринадцати!

Строка `Hash.new(0)` говорит языку Руби о том, что если слово не найдено, то будет возвращено автоматическое значение — ноль. Если бы мы объявили хеш без значения по умолчанию, то получили бы ошибку «NoMethodError: undefined method `+` for nil:NilClass», ведь Руби попытался бы сложить `nil` и единицу, а этого делать нельзя:

{line-numbers: false}
```
$ pry
[1] pry(main)> nil + 1
NoMethodError: undefined method `+` for nil:NilClass
```

В этом случае говорят, что метод `+` не реализован в классе `nil`.

X> ## Задание
X> Напишите программу, которая считает частотность букв и выводит на экран список букв и их количество в предложении.
